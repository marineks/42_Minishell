Principes de notre team:
- METTRE LES HEADERS A LA FIN
- Toujours git pull avant de push
- Toujours mettre à la norme avant de push
- Toujours tester avant de push
- Essayer de faire du code lisible (MACROs, commentaires au dessus des fonctions)

N'hésite pas à rajouter ce qu'il te semble nécessaire :)
(comme ça on teste les git conflicts hihi)

Rappel de commandes trop cool quand on travaille à plusieurs:
- git pull : récupérer les potentiels changements qui ont été faits depuis mon dernier push
- git push : bon tu connais
- git stash : très utile, car si tu changes un fichier, et que la personne B a changé ce même fichier et a push
				, tu peux "stash" (aka mettre de côté tes changements) avant de git pull. Pourquoi c'est utile?
				car quand tu git pull, tu peux potentiellement écraser tes propres changements et les perdre à tout jamais.
				Or là ce que tu fais, c'est "git stash", puis "git pull", puis "git stash pop". 
	> git stash pop = tu réappliques les changements que toi tu as faits sur ton dossier updaté avec le git pull.
	Si tout se passe bien, RAS; si vous avez travaillé sur le même fichier on a plus qu'à traiter les conflits 

SUR LES BRANCHES:
(https://jameschambers.co.uk/git-team-workflow-cheatsheet)

COUCOU
Oulalala

valgrind --leak-check=full --show-leak-kinds=all --track-fds=yes --suppressions=ignorereadline ./minishell
valgrind --leak-check=full --track-origins=yes ./minishell
valgrind --leak-check=full --show-leak-kinds=all --track-fds=yes --trace-children=yes --track-origins=yes --suppressions=ignorereadline ./minishell


void	print_cmd(t_cmd *lst)
{
	t_cmd *tmp;
	int i;
	
	tmp = lst;
	i = 0;
	printf("DETAIL DES COMMANDES RENTREES\n");
	printf("----------------------------------------------------------\n");
	while (tmp)
	{
		printf("is pipe : %d - LEFT : %p - RIGHT: %p\n", tmp->is_pipe, tmp->left, tmp->right);
		printf("INFOS:\n%sCmd :%s |%s|\nBuiltin : %d\nRedir_in : %d\nRedir_out : %d\nFd_in : %d\nFd_out : %d\n",\
		YELLOW, RESET, tmp->infos.cmd, tmp->infos.builtin, tmp->infos.redir_in, tmp->infos.redir_out, tmp->infos.fd_in, tmp->infos.fd_out);
		printf("Voici les flags de la commande :\n");
		for (int i = 0; tmp->infos.flags && tmp->infos.flags[i]; i++)
			printf("i : %d - str : |%s|\n", i, tmp->infos.flags[i]);
		printf("----------------------------------------------------------\n");
		tmp = tmp->right;
		i++;
	}
}

void	print_token(t_token *lst)
{
	t_token *tmp;
	
	int i = 0;
	printf("lst = %p\n", lst);
	tmp = lst;
	while (tmp)
	{
		printf("NODE : %d - TYPE : %d - STATE : %d - Str: |%s|\n", i, tmp->type, tmp->state, tmp->str);
		printf("----------------------------------------------------------\n");
		tmp = tmp->next;
		i++;
	}
}
